# Standart libraries
import json

# Third party packages
import allure
import pytest
import pytest_check as check
import requests
from jsonschema import validate

# My packages
from pytest_DataCenter_functional.test_REST_API.tools.dc_base_url import base_url_dc

path = "https://" + base_url_dc() + ":9088/datacenter/api/v2/attributes/subject"
body = {"protocolIds": ["e005b28a-f9eb-4855-aaad-b69a80e710b8"], "limit": 1000}
r = requests.post(url=path, json=body, verify=False)


@allure.epic("DC REST AttrSync")
@allure.feature("Individual requests to the attribute store")
@pytest.mark.testRESTAPI
@allure.story("–ó–∞–ø—Ä–æ—Å —Ç–µ–º—ã –ø–∏—Å—å–º–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É Mail")
class TestRequestMailSubjectInAttributeStoreByIndexes:
    @allure.title("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞")
    def test_status_code_200(self):
        assert r.status_code == 200

    @allure.title("Headers 'content-type'")
    def test_content_type(self):
        con_type = r.headers["content-type"]
        assert con_type == "application/json; charset=utf-8"

    @allure.title("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
    def test_response_time(self):
        resp_time = r.elapsed.total_seconds()
        assert resp_time <= 30

    @allure.title("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    def test_number_of_strings(self):
        data_dict = r.json()
        check.greater_equal(len(data_dict), 1)
        check.less_equal(len(data_dict), 1000)

    @allure.title("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ")
    def test_return_data(self):
        data = [
            "you might like: 500pcs thank you for my small business s...",
            "01-02-2022--004",
            "sql-kib. –ø–∏—Å—å–º–æ 184",
            "sql-kib. –ø–∏—Å—å–º–æ 51",
            "sql-kib. –ø–∏—Å—å–º–æ 165",
            "22-02-2022--002",
            "–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è slack: pl8-mdx",
            "–Ω—É–∂–Ω–æ —É—Å–ø–µ—Ç—å  adidas, levi‚Äôs, pandora –∏ –Ω–µ —Ç–æ–ª—å–∫–æ",
            "sql-kib. –ø–∏—Å—å–º–æ 84",
            "sql-kib. –ø–∏—Å—å–º–æ 120",
            "–ø–∏—Å—å–º–æ –¥–≤—É–º –∞–¥—Ä–µ—Å–∞—Ç–∞–º",
            "–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è youtube",
            "—Å–µ—Ä–≥–µ–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–∫–∏ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ google",
            "sql-kib. –ø–∏—Å—å–º–æ 19",
            "sql-kib. –ø–∏—Å—å–º–æ 65",
            "welcome to mailtrap! your test emails are now safe",
            "3 —Ñ–∞–∏–ª–∞ –≤ rar - nopass",
            "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–∏ —á–µ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ñ–¥",
            "s.kuzin.si –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤–º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ slack",
            "sql-kib. –ø–∏—Å—å–º–æ 87",
            "—É–≥–∞–¥–∞–∏—Ç–µ —Å –ø–æ–¥–∞—Ä–∫–æ–º üôãüèª‚Äç‚ôÇÔ∏è –∏–ª–∏ –ø–æ—Ä–∞–¥—É–∏—Ç–µ —Å–µ–±—è üíù",
            "–º—ã –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–æ–≤—ã–∏ –≤—Ö–æ–¥ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç",
            "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—à–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            "sql-kib. –ø–∏—Å—å–º–æ 138",
            "sql-kib. –ø–∏—Å—å–º–æ 160",
            "sql-kib. –ø–∏—Å—å–º–æ 188",
            "sql-kib. –ø–∏—Å—å–º–æ 30",
            "looking for this? 2/3/5pcs seamless women yoga set workout...",
            "3 —Ñ–∞–∏–ª–∞ –≤ zip - pass - 12345",
            "—Å–µ—Ä–≥–µ–∏, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–∫–∏ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ google –Ω–∞ —É—Å—Ç—Ä–æ–∏—Å—Ç–≤–µ windows",
            "–æ–æ–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–∏—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–∏ —á–µ–∫",
            "sql-kib. –ø–∏—Å—å–º–æ 95",
            "sql-kib. –ø–∏—Å—å–º–æ 1",
            "sql-kib. –ø–∏—Å—å–º–æ 157",
            "–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "3 —Ñ–∞–∏–ª–∞ –≤ rar - pass - 12345",
            "endpointcontroller quarantine test mail",
            "seen this? big size 39-47 desert tactical mens boot...",
            "—Å–µ—Ä–≥–µ–∏ —Å–µ—Ä–≥–µ–µ–≤ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤–º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ slack",
            "3 —Ñ–∞–∏–ª–∞ –≤ zip - nopass",
            "–≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç slack —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–∏—Å—Ç–≤–∞",
        ]
        data_dict = r.json()
        with allure.step("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            check.is_true(set(data).issubset(data_dict))
        with allure.step("–ö–æ–ª-–≤–æ –¥–∞–Ω–Ω—ã—Ö"):
            check.equal(len(data_dict), 280)

    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–π —Å—Ö–µ–º—ã JSON")
    def test_schema(self):
        schema = {
            "type": "array",
        }
        resp = r.json()
        validate(resp, schema=schema)
